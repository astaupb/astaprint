openapi: 3.0.0
info:
  description: >-
    API spec for AStAPrint admin routes
  version: 0.3.0
  title: AStAPrint REST API - Admin Routes
  contact:
    email: it@asta.upb.de
  license:
    name: AGPLv3
    url: 'https://www.gnu.org/licenses/agpl-3.0.html'
tags:
  - name: Authorize
    description: Authorize yourself as admin
  - name: Users
    description: User management
  - name: Admins
    description: Admin management
  - name: Dispatcher Queue
    description: Surveillance of the dispatcher queue
  - name: Printers
    description: Printer Management
  - name: Journal
    description: Complete payment journal access
paths:
  '/tokens':
    get:
      operationId: get_admin_tokens
      tags:
        - Authorize
      summary: Get list of active login tokens for currently logged in admin user
      security:
        - token: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdminToken'
    post:
      operationId: post_admin_token
      summary: Get new token using username:password auth
      tags:
        - Authorize
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: string
                format: base64
              example: >-
                "eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
      security:
        - basicAuth: []
    delete:
      operationId: delete_admin_tokens
      tags:
        - Authorize
      summary: Delete all currently active logins to remotely log out anyone with access to this account
      security:
        - token: []
      responses:
        '205':
          description: Success - reset content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/tokens/{id}':
    get:
      operationId: get_single_admin_token
      tags:
        - Authorize
      summary: Get information for a single given active login
      security:
        - token: []
      parameters:
        - name: id
          in: path
          description: id of the admin token
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
    delete:
      operationId: delete_single_admin_token
      tags:
        - Authorize
      summary: Delete/deactivate a given login
      security:
        - token: []
      parameters:
        - name: id
          in: path
          description: id of the admin token
          required: true
          schema:
            type: integer
      responses:
        '205':
          description: Success - reset content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/printers':
    get:
      operationId: get_printers
      tags:
        - Printers
      summary: Get list of all printers in the system
      security:
        - token: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Printer'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
    post:
      operationId: post_printer
      tags:
        - Printers
      summary: Add a new printer to the system
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPrinter'
      responses:
        '205':
          description: Success - Reset Content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/printers/{device_id}':
    get:
      operationId: get_single_printer
      parameters:
        - in: path
          name: device_id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Printers
      summary: Get information on a single printer
      security:
        - token: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Printer'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
    delete:
      operationId: delete_printer
      parameters:
        - in: path
          name: device_id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Printers
      summary: Delete a printer from the system
      security:
        - token: []
      responses:
        '205':
          description: Success - Reset Content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
    put:
      operationId: put_printer_details
      parameters:
        - in: path
          name: device_id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Printers
      summary: Update printer details for an existing printer
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrinterUpdate'
      responses:
        '205':
          description: Success - Reset Content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/printers/{device_id}/queue':
    get:
      operationId: get_queue
      parameters:
        - in: path
          name: device_id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Printers
      summary: Show print queue status of a printer
      security:
        - token: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrinterQueueTask'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
    delete:
      operationId: delete_queue
      parameters:
        - in: path
          name: device_id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Printers
      summary: Clear the print queue of a given printer
      security:
        - token: []
      responses:
        '205':
          description: Success - Reset Content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Printer not found
        '424':
          description: Task not found
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/journal':
    get:
      operationId: get_journal
      tags:
        - Journal
      summary: Show the complete (all user) journal
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
    post:
      operationId: post_to_journal
      tags:
        - Journal
      summary: Manually add a transaction to the journal
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/journal/tokens':
    get:
      operationId: get_journal_tokens
      tags:
        - Journal
      summary: Show existing generated journal tokens and their status
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
    post:
      operationId: post_journal_token
      tags:
        - Journal
      summary: Create a new batch of journal tokens with a given value
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/jobs/queue':
    get:
      operationId: get_dispatcher_queue
      tags:
        - Dispatcher Queue
      summary: Show complete list of currently processing documents in the dispatcher
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/admins':
    get:
      operationId: get_admins
      tags:
        - Admins
      summary: Get list of all admin accounts
      security:
        - token: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Admin'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
    post:
      operationId: post_new_admin
      tags:
        - Admins
      summary: Add a new admin account
      security:
        - token: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAdmin'
      responses:
        '205':
          description: Success - Reset Content
        '471':
          description: Login invalid (not alphanumeric or more than 32 chars)
        '472':
          description: Login already taken
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/admins/{id}':
    get:
      operationId: get_single_admin
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Admins
      summary: Show a single admin's information
      security:
        - token: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
    delete:
      operationId: delete_admin
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Admins
      summary: Delete an admin account
      security:
        - token: []
      responses:
        '205':
          description: Success - Reset Content
        '403':
          description: Forbidden
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
    put:
      operationId: put_admin
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Admins
      summary: Update an admin account
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUpdate'
      responses:
        '205':
          description: Success - Reset Content
        '403':
         description: Forbidden
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/admins/{id}/password':
    put:
      operationId: put_admin_password
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Admins
      summary: Set a new password for the specified admin
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        '204':
          description: Success - No Content
        '403':
          description: Forbidden
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/users':
    get:
      operationId: get_all_users
      tags:
        - Users
      summary: Get a list of all users
      security:
        - token: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/users/{id}':
    get:
      operationId: get_user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Users
      summary: Get information on a single user
      security:
        - token: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/users/{id}/credit':
    get:
      operationId: get_user_credit
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Users
      summary: Get credit of a given user account
      security:
        - token: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: number
                format: double
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/users/{id}/journal':
    get:
      operationId: get_user_journal
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Users
      summary: Show transactions for a specific user
      security:
        - token: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/users/{id}/password':
    post:
      operationId: reset_user_password
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Users
      summary: Reset a user`s password and send him a temporary password via mail
      security:
        - token: []
      responses:
        '204':
          description: Success - No Content
        '400':
          description: User has no Email
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
    put:
      operationId: change_user_password
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Users
      summary: Change user`s password to a defined one
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              type: string
            example: '"password"'
      responses:
        '204':
          description: Success - No Content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/users/{id}/name':
    put:
      operationId: change_user_name
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Users
      summary: Change username of a user
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              type: string
            example: '"username"'
      responses:
        '205':
          description: Success - Reset Content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/users/{id}/card':
    put:
      operationId: change_user_card
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Users
      summary: Change card of user
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCard'
      responses:
        '205':
          description: Success - Reset Content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/users/{id}/email':
    put:
      operationId: change_user_email
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Users
      summary: Change or set email of a user
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              type: string
            example: '"name@mail.upb.de"'
      responses:
        '205':
          description: Success - Reset Content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/users/{id}/locked':
    put:
      operationId: change_user_locked
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Users
      summary: Define if a an account is locked
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
            example: true
      responses:
        '205':
          description: Success - Reset Content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/users/tou_accept':
    post:
      operationId: clear_tou_accept
      tags:
        - Users
      summary: Reset terms of use acceptance for all users
      security:
        - token: []
      responses:
        '204':
          description: Success - No Content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
servers:
  - url: 'https://astaprint.upb.de/api/v1/admin'
    description: Production server
components:
  securitySchemes:
    token:
      type: apiKey
      name: X-Api-Key
      in: header
    basicAuth:
      type: http
      scheme: basic
  responses:
    UnauthorizedError:
      description: API key is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
    ServerError:
      description: Internal server error
    BadGateway:
      description: The server is up but the service seems to be down
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: u32
          example: 18616
        name:
          type: string
          example: "name"
        credit:
          type: integer
          format: i32
          example: 500
        options:
          $ref: '#/components/schemas/JobOptions'
        card:
          type: integer
          format: u64
          example: 1179636210
        pin:
          type: integer
          format: u32
          example: 18000
        locked:
          type: boolean
          example: true
        email:
          type: string
          example: "name@mail.upb.de"
        created:
          type: integer
          format: i64
          example: 1553622963
        updated:
          type: integer
          format: i64
          example: 1556971410
    UserCard:
      type: object
      properties:
        sn:
          type: integer
          format: u64
          example: 1179636210
        pin:
          type: integer
          format: u32 
          example: 18000
    JobOptions:
      type: object
      properties:
        color:
          type: boolean
          example: true
        duplex:
          type: integer
          format: u8
          description: 0 for no duplex /1 for long edge / 2 for short edge
          example: 
        copies:
          type: integer
          format: u16
          description: 1-999
          example: 8
        collate:
          type: boolean
          description: collate the pages with same numbers while using copies
          example: false
        bypass:
          type: boolean
          description: use the bypass tray
          example: false
        keep:
          type: boolean
          description: keep the job after successful printing
          example: false
        a3:
          type: boolean
          example: false
        range:
          type: string
          description: select the pages to print
          example: "1-4,7,10-13"
        nup:
          type: integer
          format: u8
          description: 1/2/4
          example: 1
        nuppageorder:
          type: integer
          format: u8
          description: 0/1/2/3
          example: 2
        displayname:
          type: string
          example: job.pdf
    Printer:
      type: object
      properties:
        id:
          type: integer
          format: u32
          example: 7
        hostname:
          type: string
          example: print-cs-44338
        ip:
          type: string
          example: "192.168.0.2"
        community:
          type: string
          example: "user"
        mac:
          type: string
          example: "58:38:79:45:DB:1G"
        device_id:
          type: integer
          format: u32
          example: 44338
        location:
          type: string
          example: "BI_2.107"
        has_a3:
          type: boolean
          example: false
        coin_operated:
          type: boolean
          example: false
        description:
          type: string
          example: "offline"
        watch_toner:
          type: boolean
          example: true
        watch_tray1: 
          type: boolean
          example: true
        watch_tray2:
          type: boolean
          example: true
        watch_tray3:
          type: boolean
          example: true
        watch_interval:
          description: watch interval in minutes
          type: integer
          format: u32
          example: 5
        last_watched:
          type: integer
          format: i64
          example: 1574941533
        status:
          $ref: '#/components/schemas/PrinterStatus'
        counter:
          $ref: '#/components/schemas/PrinterCounter'
        queue:
          $ref: '#/components/schemas/PrinterQueueTask'
    NewPrinter:
      type: object
      properties:
        id:
          type: integer
          format: u32
          example: 7
        hostname:
          type: string
          example: print-cs-44338
        ip:
          type: string
          example: "192.168.0.2"
        community:
          type: string
          example: "user"
        mac:
          type: string
          example: "58:38:79:45:DB:1G"
        device_id:
          type: integer
          format: u32
          example: 44338
        location:
          type: string
          example: "BI_2.107"
        has_a3:
          type: boolean
          example: false
        coin_operated:
          type: boolean
          example: false
        description:
          type: string
          example: "offline"
    PrinterUpdate:
      type: object
      properties:
        hostname:
          type: string
          example: null
          nullable: true
        ip:
          type: string
          example: null
          nullable: true
        community:
          type: string
          example: null
          nullable: true
        mac:
          type: string
          example: null
          nullable: true
        device_id:
          type: integer
          format: u32
          example: 44338
          nullable: true
        location:
          type: string
          example: "BI_2.107"
          nullable: true
        has_a3:
          type: boolean
          example: false
          nullable: true
        coin_operated:
          type: boolean
          example: false
          nullable: true
        description:
          type: string
          example: null
          nullable: true
        watch_toner:
          type: boolean
          example: true
          nullable: true
        watch_tray1: 
          type: boolean
          example: true
          nullable: true
        watch_tray2:
          type: boolean
          example: true
          nullable: true
        watch_tray3:
          type: boolean
          example: true
          nullable: true
        watch_interval:
          description: watch interval in minutes
          type: integer
          format: u32
          example: 5
          nullable: true
    PrinterStatus:
      type: object
      properties:
        scan:
          type: integer
          format: i64
          description: summary of scan status flags
        copy:
          type: integer
          format: i64
          description: summary of copy status flags
        toner_c:
          type: integer
          format: i64
          description: toner value of cyan
          example: 80
        toner_m:
          type: integer
          format: i64
          description: toner value of magenta
          example: 90
        toner_y:
          type: integer
          format: i64
          description: toner value of yellow
          example: 80
        toner_k:
          type: integer
          format: i64
          description: toner value of black
          example: 50
        tray_1:
          type: integer
          format: i64
          description: pages left in tray 1
          example: 550
        tray_2:
          type: integer
          format: i64
          description: pages left in tray 2
          example: 550
        tray_3:
          type: integer
          format: i64
          description: pages left in tray 3
          example: 1000
    PrinterCounter:
      type: object
      properties:
        total:
          type: integer
          format: i64
          description: total pages printed with copying
          example: 82940
        copy_total:
          type: integer
          format: i64
          description: total pages copied
          example: 109
        copy_bw:
          type: integer
          format: i64
          description: pages copied without color
          example: 109
        print_total:
          type: integer
          format: i64
          description: total pages printed without copying
          example: 82831
        print_bw:
          type: integer
          format: i64
          description: pages printed in greyscale without copying 
          example: 78868
    PrinterQueueTask:
      type: object
      properties:
        user_id:
          type: integer
          format: u32
          example: 420
        uid:
          type: string
          example: "78e543ffd3267a16ecaa7117f5d938d64224b0f5"
    Transaction:
      type: object
      properties:
        value:
          type: integer
          format: i32
          description: Value of the transaction which is added to the credit
          example: 5
        user_id:
          type: integer
          format: u32
          example: 18616
        admin_id:
          type: integer
          format: u32
          example: null
          nullable: true
        description:
          type: string
          example: 2 Seiten
        print:
          $ref: '#/components/schemas/PrintTransaction'
          description: Information about the job which was printed
          nullable: true
        created:
          type: integer
          format: i64
          example: 1567600648
    PrintTransaction:
      type: object
      properties:
        pages:
          type: integer
          format: u16
          description: total pages printed
          example: 2
        colored:
          type: integer
          format: u16
          description: number of pages from pages property that were printed in color
          example: 1
        score:
          type: integer
          format: i16
          description: estimation of saved sheets of paper
          example: 0
        device_id:
          type: integer
          format: u32
          example: 44330
        options:
          $ref: '#/components/schemas/JobOptions'
    JournalToken:
      type: object
      properties:
        id:
          type: integer
          format: u32
          example: 1020
        value:
          type: integer
          format: u32
          description: value which the token can add to the credit
          example: 100
        content:
          type: string
          description: content of the token itself
          example: "pKkayyYBj9OayyFg"
        used:
          type: boolean
          description: true if the token is already consumed
          example: true
        used_by:
          type: integer
          format: u32
          description: id of the user who consumed the token
          example: 18616
        created:
          type: integer
          format: i64
          example: 1567600648
        updated:
          type: integer
          format: i64
          example: 1556971410
    DispatcherTask:
        type: object
        properties:
          uid:
            type: string
            description: uid of specific task - hexadecimal encoded
            example: "78e543ffd3267a16ecaa7117f5d938d64224b0f5"
          filename:
            type: string
            example: "Stapel Dokument.pdf"
          keep:
            type: boolean
            description: option request which will override the default option
            nullable: true
            example: null
          color:
            type: boolean
            description: option request which will override the default option
            nullable: true
            example: null
          a3:
            type: boolean
            description: option request which will override the default option
            nullable: true
            example: null
          duplex:
            type: boolean
            description: option request which will override the default option
            nullable: true
            example: null
    Admin:
      type: object
      properties:
        id:
          type: integer
          format: u32
          example: 7
        first_name:
          type: string
          example: "Jane"
        last_name:
          type: string
          example: "Doe"
        login:
          type: string
          description: username which is used as login
          example: "jdoe"
        service:
          type: boolean
          description: True if account belongs to a service employee, false for admins
          example: true
        locked:
          type: boolean
          description: true if the admin is not allowed to login
          example: false
        expires:
          type: integer
          format: i64
          description: date on which the account expires
        created_by:
          type: integer
          format: u32
          description: id of the admin who created this admin
          example: 1
        created:
          type: integer
          format: i64
          example: 1582554910
        updated:
          type: integer
          format: i64
          example: 1582554910
    NewAdmin:
      type: object
      properties:
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        login:
          type: string
          example: "jdoe"
        password:
          type: string
          example: "password"
        service:
          type: boolean
          nullable: true
          example: null
          default: true
        locked:
          type: boolean
          nullable: true
          example: null
          default: false
        expires:
          type: integer
          format: i64
          nullable: true
          example: null
          default: 2 years from today
    AdminUpdate:
      type: object
      properties:
        first_name:
          type: string
          nullable: true
          example: null
        last_name:
          type: string
          nullable: true
          example: null
        login:
          type: string
          nullable: true
          example: "jodoe"
        service:
          type: boolean
          nullable: true
          description: True if account belongs to a service employee, false for admins
          example: null
        locked:
          type: boolean
          nullable: true
          example: null
        expires:
          type: integer
          format: i64
          nullable: true
          example: null
    AdminToken:
      type: object
      properties:
        id:
          type: integer
          format: u32
          example: 303
        user_agent:
          type: string
          example: "dart/io"
        ip:
          type: string
          example: "192.168.0.7"
        location:
          type: string
          example: "Paderborn"
        created:
          type: integer
          format: i64
          example: 1582554910
        updated:
          type: integer
          format: i64
          example: 1582554910