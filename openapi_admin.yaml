openapi: 3.0.0
info:
  description: >-
    API spec for AStAPrint admin routes
  version: 0.3.0
  title: AStAPrint REST API - Admin Routes
  contact:
    email: it@asta.upb.de
  license:
    name: AGPLv3
    url: 'https://www.gnu.org/licenses/agpl-3.0.html'
tags:
  - name: Authorize
    description: Authorize yourself as admin
  - name: Users
    description: User management
  - name: Admins
    description: Admin management
  - name: Dispatcher Queue
    description: Surveillance of the dispatcher queue
  - name: Printers
    description: Printer Management
  - name: Journal
    description: Complete payment journal access
paths:
  '/tokens':
    get:
      operationId: get_admin_tokens
      tags:
        - Authorize
      summary: Get list of active login tokens for currently logged in admin user
      security:
        - token: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdminToken'
    post:
      operationId: post_admin_token
      summary: Get new token using username:password auth
      tags:
        - Authorize
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: string
                format: base64
              example: >-
                "eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
      security:
        - basicAuth: []
    delete:
      operationId: delete_admin_tokens
      tags:
        - Authorize
      summary: Delete all currently active logins to remotely log out anyone with access to this account
      security:
        - token: []
      responses:
        '205':
          description: Success - reset content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/tokens/{id}':
    get:
      operationId: get_single_admin_token
      tags:
        - Authorize
      summary: Get information for a single given active login
      security:
        - token: []
      parameters:
        - name: id
          in: path
          description: id of the admin token
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
    delete:
      operationId: delete_single_admin_token
      tags:
        - Authorize
      summary: Delete/deactivate a given login
      security:
        - token: []
      parameters:
        - name: id
          in: path
          description: id of the admin token
          required: true
          schema:
            type: integer
      responses:
        '205':
          description: Success - reset content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/printers':
    get:
      operationId: get_printers
      tags:
        - Printers
      summary: Get list of all printers in the system
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
    post:
      operationId: post_printer
      tags:
        - Printers
      summary: Add a new printer to the system
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/printers/{device_id}':
    get:
      operationId: get_single_printer
      parameters:
        - in: path
          name: device_id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Printers
      summary: Get information on a single printer
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
    delete:
      operationId: delete_printer
      parameters:
        - in: path
          name: device_id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Printers
      summary: Delete a printer from the system
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
    put:
      operationId: put_printer_details
      parameters:
        - in: path
          name: device_id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Printers
      summary: Update printer details for an existing printer
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/printers/{device_id}/queue':
    get:
      operationId: get_queue
      parameters:
        - in: path
          name: device_id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Printers
      summary: Show print queue status of a printer
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
    delete:
      operationId: delete_queue
      parameters:
        - in: path
          name: device_id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Printers
      summary: Clear the print queue of a given printer
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/journal':
    get:
      operationId: get_journal
      tags:
        - Journal
      summary: Show the complete (all user) journal
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
    post:
      operationId: post_to_journal
      tags:
        - Journal
      summary: Manually add a transaction to the journal
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/journal/tokens':
    get:
      operationId: get_journal_tokens
      tags:
        - Journal
      summary: Show existing generated journal tokens and their status
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
    post:
      operationId: post_journal_token
      tags:
        - Journal
      summary: Create a new batch of journal tokens with a given value
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/jobs/queue':
    get:
      operationId: get_dispatcher_queue
      tags:
        - Dispatcher Queue
      summary: Show complete list of currently processing documents in the dispatcher
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/admins':
    get:
      operationId: get_admins
      tags:
        - Admins
      summary: Get list of all admin accounts
      security:
        - token: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Admin'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
    post:
      operationId: post_new_admin
      tags:
        - Admins
      summary: Add a new admin account
      security:
        - token: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAdmin'
      responses:
        '204':
          description: Success - No Content
        '472':
          description: Login already taken
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/admins/{id}':
    get:
      operationId: get_single_admin
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Admins
      summary: Show a single admin's information
      security:
        - token: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
    delete:
      operationId: delete_admin
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Admins
      summary: Delete an admin account
      security:
        - token: []
      responses:
        '205':
          description: Success - Reset Content
        '403':
          description: Forbidden
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
    put:
      operationId: put_admin
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Admins
      summary: Update an admin account
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUpdate'
      responses:
        '205':
          description: Success - Reset Content
        '403':
         description: Forbidden
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/admins/{id}/password':
    put:
      operationId: put_admin_password
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Admins
      summary: Set a new password for the specified admin
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        '204':
          description: Success - No Content
        '403':
          description: Forbidden
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/users/{id}':
    get:
      operationId: get_user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Users
      summary: Get information on a single user
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/users/{id}/credit':
    get:
      operationId: get_user_credit
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Users
      summary: Get credit of a given user account
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/users/{id}/journal':
    get:
      operationId: get_user_journal
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Users
      summary: Show transactions for a specific user
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/users':
    get:
      operationId: get_all_users
      tags:
        - Users
      summary: Get a list of all users
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/users/{id}/password':
    post:
      operationId: reset_user_password
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Users
      summary: Reset a user`s password and send him a temporary password via mail
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
    put:
      operationId: change_user_password
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Users
      summary: Change user`s password to a defined one
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/users/{id}/name':
    put:
      operationId: change_user_name
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Users
      summary: Change username of a user
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/users/{id}/email':
    put:
      operationId: change_user_email
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Users
      summary: Change or set email of a user
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/users/{id}/locked':
    put:
      operationId: change_user_locked
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: u32
      tags:
        - Users
      summary: Define if a an account is locked
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
  '/users/tou_accept':
    post:
      operationId: clear_tou_accept
      tags:
        - Users
      summary: Reset terms of use acceptance for all users
      security:
        - token: []
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
        '502':
          $ref: '#/components/responses/BadGateway'
servers:
  - url: 'https://astaprint.upb.de/api/v1/admin'
    description: Production server
components:
  securitySchemes:
    token:
      type: apiKey
      name: X-Api-Key
      in: header
    basicAuth:
      type: http
      scheme: basic
  responses:
    UnauthorizedError:
      description: API key is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
    ServerError:
      description: Internal server error
    BadGateway:
      description: The server is up but the service seems to be down
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        credit:
          type: integer
        options:
          $ref: '#/components/schemas/JobOptions'
        card:
          type: integer
        pin:
          type: integer
        locked:
          type: boolean
        email:
          type: string
        created:
          type: integer
        updated:
          type: integer
    JobOptions:
      type: object
      properties:
        color:
          type: boolean
        duplex:
          type: integer
          format: u8
          description: 0/1/2
        copies:
          type: integer
          format: u16
          description: 1-999
        collate:
          type: boolean
        bypass:
          type: boolean
        keep:
          type: boolean
        a3:
          type: boolean
        range:
          type: string
          description: 'eg 1-4,7,10-13'
        nup:
          type: integer
          format: u8
          description: 1/2/4
        nuppageorder:
          type: integer
          format: u8
          description: 0/1/2/3
        displayname:
          type: string
    Printer:
      type: object
      properties:
        id:
          type: integer
        hostname:
          type: string
        ip:
          type: string
        community:
          type: string
        mac:
          type: string
        device_id:
          type: integer
        location:
          type: string
        has_a3:
          type: boolean
        coin_operated:
          type: boolean
        description:
          type: string
        watch_toner:
          type: boolean
        watch_tray1:
          type: boolean
        watch_tray2:
          type: boolean
        watch_tray3:
          type: boolean
        watch_interval:
          type: integer
        last_watched:
          type: integer
        status:
          $ref: '#/components/schemas/PrinterStatus'
        counter:
          $ref: '#/components/schemas/PrinterCounter'
        queue:
          $ref: '#/components/schemas/PrinterQueueTask'
    PrinterStatus:
      type: object
      properties:
        scan:
          type: integer
        copy:
          type: integer
        toner_c:
          type: integer
        toner_m:
          type: integer
        toner_y:
          type: integer
        toner_k:
          type: integer
        tray_1:
          type: integer
        tray_2:
          type: integer
        tray_3:
          type: integer
    PrinterCounter:
      type: object
      properties:
        total:
          type: integer
        copy_total:
          type: integer
        copy_bw:
          type: integer
        print_total:
          type: integer
        print_bw:
          type: integer
    PrinterQueueTask:
      type: object
      properties:
        user_id:
          type: integer
        uid:
          type: string
    Transaction:
      type: object
      properties:
        value:
          type: integer
        user_id:
          type: integer
        admin_id:
          type: integer
        description:
          type: string
        print:
          $ref: '#/components/schemas/PrintTransaction'
        timestamp:
          type: string
        created:
          type: integer
    PrintTransaction:
      type: object
      properties:
        pages:
          type: integer
          format: u16
        colored:
          type: integer
          format: u16
          description: number of pages from pages property that were printed in color
        score:
          type: integer
          format: i16
          description: estimation of saved sheets of paper
        device_id:
          type: integer
          format: u32
        options:
          $ref: '#/components/schemas/JobOptions'
    JournalToken:
      type: object
      properties:
        id:
          type: integer
        value:
          type: integer
        content:
          type: string
        used:
          type: boolean
        used_by:
          type: integer
        created:
          type: integer
        updated:
          type: integer
    DispatcherTask:
        type: object
        properties:
          uid:
            type: string
            description: uid of specific task - hexadecimal encoded
          filename:
            type: string
          keep:
            type: boolean
          color:
            type: boolean
          a3:
            type: boolean
          duplex:
            type: boolean
    Admin:
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        login:
          type: string
        service:
          type: boolean
          description: True if account belongs to a service employee, false for admins
        locked:
          type: boolean
        expires:
          type: integer
        created_by:
          type: integer
        created:
          type: integer
        updated:
          type: integer
    NewAdmin:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        login:
          type: string
        password:
          type: string
    AdminUpdate:
      type: object
      properties:
        first_name:
          type: string
          nullable: true
        last_name:
          type: string
          nullable: true
        login:
          type: string
          nullable: true
        service:
          type: boolean
          nullable: true
        locked:
          type: boolean
          nullable: true
        expires:
          type: integer
          format: i64
          nullable: true
    AdminToken:
      type: object
      properties:
        id:
          type: integer
        user_agent:
          type: string
        ip:
          type: string
        location:
          type: string
        created:
          type: integer
        updated:
          type: integer
