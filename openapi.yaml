openapi: 3.0.0
info:
  description: >-
    This is the specification of the backend providing data to the new AStA
    Copyclient
  version: 0.3.0
  title: AStAPrint REST API
  contact:
    email: it@asta.upb.de
  license:
    name: AGPLv3
    url: 'https://www.gnu.org/licenses/agpl-3.0.html'
tags:
  - name: Authorize
    description: Operations to start with
  - name: User
    description: Operations about user
  - name: Jobs
    description: Operations about printjobs
  - name: Dispatcher
    description: Operations about dispatchqueue
  - name: Printers
    description: Operations about printers
  - name: Journal
    description: Operations about journal
paths:
  '/jobs':
    get:
      operationId: fetchJobs
      tags:
        - Jobs
      summary: Get all jobs of current user
      security:
        - token: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
              example:
                - id: 1
                  timestamp: 1536953189
                  user_id: 1
                  info:
                    filename: file.pdf
                    pagecount: 3
                    color: true
                    a3: false
                    password: ''
                  options:
                    duplex: 0
                    copies: 1
                    collate: false
                    keep: true
                    a3: true
                    range: ''
                    nup: 1
                    nuppageorder: 0
                - id: 2
                  timestamp: 1536875881
                  user_id: 1
                  info:
                    filename: file2.pdf
                    pagecount: 6
                    color: true
                    a3: false
                    password: ''
                  options:
                    duplex: 1
                    copies: 2
                    collate: false
                    keep: true
                    a3: false
                    range: ''
                    nup: 2
                    nuppageorder: 0
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      operationId: deleteJobs
      tags:
       - Jobs
      summary: Delete all jobs
      security:
        - token: []
      responses:
        '205':
          description: Success - Reset Content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/jobs/queue':
    post:
      operationId: postJob
      tags:
        - Jobs
        - Dispatcher
      summary: Post a new job to the dispatcher queue
      security:
        - token: []
      requestBody:
        required: true
        content:
          application/pdf:
            schema:
              type: string
              format: binary
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: string
                example: '"a636c183d5ee1c2d82779938249e208a7588b03d"'
        '400':
          description: Bad request (eg. no base64)
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '415':
          description: Unsupported media type
      parameters:
        - in: query
          name: password
          schema:
            type: string
          description: Password for decrypting password-protected PDFs
        - in: query
          name: filename
          schema:
            type: string
          description: Filename on the original filesystem
    get:
      operationId: getJobQueue
      tags:
        - Jobs
        - Dispatcher
      summary: Get state of the dispatcher queue
      security:
        - token: []
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DispatcherQueue'
              example:
                - uid: "bq6K-7V5zLC_DLbALwjdtP7"
                  filename: "filename.pdf"
                  keep: null
                  color: true
                  a3: false
                  duplex: 1
                - uid: "t49KSFkbmlFSkXaHcbcNdk8"
                  filename: "filename.pdf"
                  keep: true
                  color: null
                  a3: null
                  duplex: 0
        '400':
          description: Bad request (eg. no base64)
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/user/options':
    get:
      operationId: getDefaultOptions
      tags:
        - User
      summary: Get default options of user
      security:
        - token: []
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/JobOptions'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      operationId: setDefaultOptions
      tags:
        - User
      summary: Set default options of user
      security:
        - token: []
      responses:
        '204':
          description: Success - No content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/jobs/{id}':
    get:
      operationId: fetchJob
      parameters:
        - name: id
          in: path
          description: Id of the jobfile
          required: true
          schema:
            type: integer
      tags:
        - Jobs
      summary: Get specified job
      security:
        - token: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Resource not found
    delete:
      operationId: deleteJob
      parameters:
        - name: id
          in: path
          description: Id of the jobfile
          required: true
          schema:
            type: integer
      tags:
        - Jobs
      summary: Delete specified job
      security:
        - token: []
      responses:
        '205':
          description: Success - No content - Reset view
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Resource not found
    post:
      operationId: copyJob
      parameters:
        - name: id
          in: path
          description: Id of the jobfile
          required: true
          schema:
            type: integer
        - name: image
          in: query
          description: process job as image while copying
          required: false
          schema:
            type: boolean
      tags:
        - Jobs
      summary: Copy specified Job
      security:
        - token: []
      responses:
        '200':
          description: Success - OK - Job is copied
        '202':
          description: Success - Started Processing - Job is being processed
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Job not found
  '/jobs/{id}/pdf':
    get:
      operationId: getPdf
      summary: Get PDF File associated to job
      tags:
        - Jobs
      security:
        - token: []
      parameters:
        - name: id
          in: path
          description: Id of the jobfile
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Resource not found
  '/jobs/{id}/preview/{index}':
    get:
      operationId: fetchJobPreview
      parameters:
        - name: id
          in: path
          description: UID of the jobfile
          required: true
          schema:
            type: string
        - name: index
          in: path
          description: index of the preview file
          required: true
          schema:
            type: integer
      tags:
        - Jobs
      summary: Get specified job's preview image with index
      security:
        - token: []
      responses:
        '200':
          description: Success
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Resource not found
  '/jobs/{id}/info':
    get:
      operationId: fetchJobInfo
      parameters:
        - name: id
          in: path
          description: ID of the jobfile
          required: true
          schema:
            type: string
      tags:
        - Jobs
      summary: Get specified job's info only
      security:
        - token: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobInfo'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Resource not found
  '/jobs/{id}/options':
    get:
      operationId: fetchJobOptions
      parameters:
        - name: id
          in: path
          description: Id of the jobfile
          required: true
          schema:
            type: string
      tags:
        - Jobs
      summary: Get specified job options only
      security:
        - token: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobOptions'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Resource not found
    put:
      operationId: updateJobOptions
      parameters:
        - name: id
          in: path
          description: Id of the jobfile
          required: true
          schema:
            type: integer
      tags:
        - Jobs
      summary: Update job's whole options to new values
      security:
        - token: []
      responses:
        '205':
          description: Success - Reset content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Resource not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobOptions'
  '/jobs/<id>/sharecode':
    get:
      operationId: getSharecode
      summary: Receice code to share a specified job
      tags:
        - Jobs
      parameters:
        - name: id
          in: path
          description: Id of the jobfile
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: string
                example: '"4bjeceVD1kfz0CQgPdwW2"'
  '/jobs/sharecode':
    post:
      operationId: postSharecode
      summary: Receive shared job by sharecode
      tags:
        - Jobs
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: '"4bjeceVD1kfz0CQgPdwW2"'
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/user/tou_accept':
    put:
      operationId: setTouAccept
      parameters:
        - name: tou_accept
          in: query
          description: value on which to set the flag
          required: true
          schema:
            type: boolean
      summary: Set the Terms of Usage accept flag
      tags:
        - User
      security:
        - token: []
      responses:
        '205':
          description: Success - Reset Content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/user':
    get:
      operationId: getUser
      summary: Get User summary
      tags:
        - User
      security:
        - token: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                name: test
                user_id: 1
                credit: 19.6
                active_tokens: 4
                token_id: 77
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/user/name':
    get:
      operationId: getUsername
      summary: Get plain username string
      tags:
        - User
      security:
        - token: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: string
              example: '"testuser"'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      operationId: updateUsername
      summary: Update username with JSON
      tags:
        - User
      security:
        - token: []
      responses:
        '205':
          description: Success - No content - Reset view
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '471':
          description: Disallowed characters / Too long (>32)
        '472':
          description: Username taken
      requestBody:
        content:
          application/json:
            example: '"newusername"'
            schema:
              type: string
  '/user/email':
    put:
      operationId: updateEmail
      summary: Update email with JSON
      tags:
        - User
      security:
        - token: []
      responses:
        '205':
          description: Success - No content - Reset view
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '472':
          description: Email taken
      requestBody:
        content:
          application/json:
            example: '"newusername"'
            schema:
              type: string
  '/user/tokens':
    get:
      operationId: getTokens
      summary: Get info on all active tokens
      tags:
        - User
      security:
        - token: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      operationId: login
      summary: 'Get new token using username:password auth'
      tags:
        - User
        - Authorize
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: string
                format: base64
              example: >-
                "eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ"
      security:
        - basicAuth: []
    delete:
      operationId: deleteTokens
      summary: Delete all active tokens
      tags:
        - User
      security:
        - token: []
      responses:
        '205':
          description: Success - No content - Reset view
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/user/tokens/{token_id}':
    get:
      operationId: getToken
      summary: Get info on one specific token
      tags:
        - User
      security:
        - token: []
      parameters:
        - name: token_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Resource not found
    delete:
      operationId: deleteToken
      summary: Delete one specific token
      tags:
        - User
      security:
        - token: []
      parameters:
        - name: token_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '205':
          description: Success - No content - Reset view
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Resource not found
  '/user/password':
    put:
      operationId: changePassword
      summary: Change password
      tags:
        - User
      security:
        - token: []
      responses:
        '204':
          description: Success - No content
        '400':
          description: Wrong Old Password
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      requestBody:
        description: JSON with both passwords
        required: true
        content:
          application/json:
            example:
              password:
                old: test123
                new: base64richtigsecure
            schema:
              type: object
              properties:
                password:
                  type: object
                  properties:
                    old:
                      type: string
                    new:
                      type: string
  '/user/logout':
    post:
      operationId: logout
      summary: Delete the current token to logout
      tags:
        - User
      security:
        - token: []
      responses:
        '205':
          description: Success - Reset View
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/register':
    post:
      operationId: registerUser
      summary: Register a new user
      tags:
        - Authorize
      responses:
        '204':
          description: Success - No content
        '470':
          description: Username taken
        '471':
          description: Disallowed characters / Too long (>32)
        '472':
          description: Email taken
      requestBody:
        description: JSON with information on new user
        required: true
        content:
          application/json:
            example:
              username: newuser
              password: newpassword
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
  '/journal':
    get:
      operationId: getJournal
      summary: Get the accounting journal
      security:
        - token: []
      tags:
        - Journal
      parameters:
        - in: query
          name: limit
          description: 'Limit the transactions to be fetched, defaults to 25'
          schema:
            type: integer
        - in: query
          name: asc
          schema:
            type: integer
          description: 'Toggle ascending order, defaults to 0'
      responses:
        '200':
          description: Success
          content:
            application/json:
              example:
                - value: -0.2
                  timestamp: 1536959824
                  description: Print job
                - value: -0.15
                  timestamp: 1536959104
                  description: Print job
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      operationId: postJournal
      summary: Post new entry to the journal
      security:
        - token: []
      tags:
        - Journal
      requestBody:
        required: true
        content:
          application/json:
            example:
              '"AbYDH237Flk0b"'
            schema:
              type: string
              
      responses:
        '204':
          description: Success - No content
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/user/credit':
    get:
      operationId: getCredit
      summary: Get credit as decimal number string
      tags:
        - User
      security:
        - token: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: number
              example: 1956
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/printers':
    get:
      operationId: getPrinters
      summary: Get status from all printers in copyservice
      security:
        - token: []
      tags:
        - Printers
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
              example:
                - device_id: 10174
                  location: ME U.201
                  has_a3: true
                  coin_operated: false
                - device_id: 11614
                  location: ME U.201
                  has_a3: true
                  coin_operated: false
  '/printers/{device_id}':
    get:
      operationId: getSinglePrinter
      summary: Get status from single printer
      security:
        - token: []
      tags:
        - Printers
      parameters:
        - in: path
          name: device_id
          schema:
            type: integer
          description: ID of the printer (usually called Stellplatznummer now)
          required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
              example:
                device_id: 10174
                location: ME U.201
                has_a3: true
                coin_operated: false
        '404':
          description: Resource not found
  '/printers/{device_id}/queue':
    post:
      operationId: printJob
      summary: Move job to device queue aka print something or lock the printer for scanning
      tags:
        - Jobs
        - Printers
      security:
        - token: []
      parameters:
        - name: id
          in: query
          description: Id of the jobfile
          required: false
          schema:
            type: integer
        - name: device_id
          in: path
          description: ID of the printer
          schema:
            type: integer
          required: true
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad request (eg. bad uid)
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Resource not found
    delete:
      operationId: deletePrinterQueueEntry
      summary: Cancel printing or scanlock
      security:
        - token: []
      tags:
        - Printers
      parameters:
        - in: path
          name: device_id
          schema:
            type: integer
          description: ID of the printer (usually called Stellplatznummer now)
          required: true
        - in: path
          name: queue_item
          schema:
            type: string
          description: UID of queue entry
          required: true
      responses:
        '205':
          description: Success - Reset Content
        '403':
          description: Forbidden - Printer already locked
        '404':
          description: Printer not found
        '424':
          description: Task not found
servers:
  - url: 'https://astaprint.upb.de/api/v1'
    description: Production server
components:
  securitySchemes:
    token:
      type: apiKey
      name: X-API-Key
      in: header
    basicAuth:
      type: http
      scheme: basic
  responses:
    UnauthorizedError:
      description: API key is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
    ServerError:
      description: Internal server error
    NoNetworkAuth:
      description: You need to authorize yourself to your network (eg. webauth)
    ServiceUnavailiable:
      description: The servie is temporary unavaliable
    BadGateway:
      description: The server is up but the service seems to be down
  schemas:
    Transaction:
      type: object
      properties:
        value:
          type: number
        timestamp:
          type: string
          description: only needed for legacy clients
        created:
          type: integer
        description:
          type: string
        print:
          $ref: '#/components/schemas/PrintTransaction'
    PrintTransaction:
      type: object
      properties:
        pages:
          type: integer
        colored:
          type: integer
        score:
          type: integer
          description: estimation of saved sheets of paper
        device_id:
          type: integer
        options:
          $ref: '#/components/schemas/JobOptions'
    JobOptions:
      type: object
      properties:
        color:
          type: boolean
        duplex:
          type: integer
          description: 0/1/2
        copies:
          type: integer
          description: 1-999
        collate:
          type: boolean
        bypass:
          type: boolean
        keep:
          type: boolean
        a3:
          type: boolean
        range:
          type: string
          description: 'eg 1-4,7,10-13'
        nup:
          type: integer
          description: 1/2/4
        nuppageorder:
          type: integer
          description: 0/1/2/3
        displayname:
          type: string
    JobInfo:
      type: object
      properties:
        filename:
          type: string
          description: original filename on client
        title:
          type: string
          description: title of pdf file
        pagecount:
          type: integer
          description: pagecount of original document
        colored:
          type: integer
          description: number of colored pages
        a3:
          type: boolean
          description: as detected at dispatch
    Job:
      type: object
      properties:
        id:
          type: integer
          description: id of job
        timestamp:
          type: integer
          format: int64
        info:
          $ref: '#/components/schemas/JobInfo'
        options:
          $ref: '#/components/schemas/JobOptions'
    DispatcherTask:
        type: object
        properties:
          uid:
            type: string
            description: uid of specific task - hexadecimal encoded
          filename:
            type: string
          keep:
            type: boolean
          color:
            type: boolean
          a3:
            type: boolean
          duplex:
            type: boolean
    DispatcherQueue:
        type: array
        items:
          $ref: '#/components/schemas/DispatcherTask'
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        credit:
          type: number
        tokens:
          type: integer
        token_id:
          type: integer
    Token:
      type: object
      properties:
        id:
          type: integer
        user_agent:
          type: string
        ip:
          type: string
        location:
          type: string
        created:
          type: string
    Device:
      type: object
      properties:
        device_id:
          type: integer
        location:
          type: string
        has_a3:
          type: boolean
        coin_operated:
          type: boolean

